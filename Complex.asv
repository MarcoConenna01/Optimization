% %%Complex Model%%
%design variables: wall thickness t, expansion ratio eps=Ae/At
%constraints: ...

clear variables
close all
clc

%% Design Variables
Parameters
eps = linspace(1.01,50,100);
Ln = linspace(Dc/2,1,100);
D_t = linspace(0.01,0.75*Dc,100); %CONSTRAINT REYNOLDS 100000

%% Initializing Parameters
p_ratio = zeros(length(eps),length(Ln),length(D_t));
p_c = zeros(length(eps),length(Ln),length(D_t));
A_e = zeros(length(eps),length(Ln),length(D_t));
A_t = zeros(length(eps),length(Ln),length(D_t));
D_e = zeros(length(eps),length(Ln),length(D_t));
U_e = zeros(length(eps),length(Ln),length(D_t));
m_dot = zeros(length(eps),length(Ln),length(D_t));
tg_a = zeros(length(eps),length(Ln),length(D_t));
alpha = zeros(length(eps),length(Ln),length(D_t));
Thrust = zeros(length(eps),length(Ln),length(D_t));
Mass = zeros(length(eps),length(Ln),length(D_t));
t = zeros(length(eps),length(Ln),length(D_t));
g1 = zeros(length(eps),length(Ln),length(D_t));
g2 = zeros(length(eps),length(Ln),length(D_t));
g3 = zeros(length(eps),length(Ln),length(D_t));
g4 = zeros(length(eps),length(Ln),length(D_t));
g5 = zeros(length(eps),length(Ln),length(D_t));
g6 = zeros(length(eps),length(Ln),length(D_t));
g7 = zeros(length(eps),length(Ln),length(D_t));

p_ratio = P_ratio_calculator(eps,Ln,D_t);

%% Loop cycle
for k = 42
    k
    for j = 1:length(Ln)
        for i = 1:length(eps)
            
            x(1) = eps(i);
            x(2) = Ln(j);
            x(3) = 0.1;

            [A_e(k,j,i),A_t(k,j,i), U_e(k,j,i), m_dot(k,j,i), alpha(k,j,i), p_c(k,j,i),Thrust(k,j,i), Mass(k,j,i),t(k,j,i)] = Thrust_Mass(x,p_ratio(k,j,i));
            [g, Ceq] = constraints(x,p_ratio(k,j,i));

            g1(k,j,i) = g(1); %thickness max
            g2(k,j,i) = g(2); %thickness min
            g3(k,j,i) = g(3); %alpha min
            g4(k,j,i) = g(4); %alpha max 
            g5(k,j,i) = g(5); %reynolds
            g6(k,j,i) = g(6); %mass 
            g7(k,j,i) = g(7); %thrust
        end
    end
end

%% Calculate Objective Function
Thrust_norm = Thrust./(max(Thrust,[],"all"));
Mass_norm = Mass./(max(Mass,[],"all"));
f_obj1 = Mass_norm-Thrust_norm;

% %% Plots
% figure()
% contour(eps,Ln,f_obj1)
% ylabel('Ln [m]')
% xlabel('expansion ratio')
% hold on
% contour(eps,Ln,g1,[0 0],'r',LineWidth=2); %thickness max
% hold on
% contour(eps,Ln,g2,[0 0],'r--',LineWidth=2); %thickness min
% hold on
% contour(eps,Ln,g3,[0 0],'b',LineWidth=2); %alpha min
% hold on
% contour(eps,Ln,g4,[0 0],'b--',LineWidth=2); %alpha max 
% hold on
% contour(eps,Ln,g5,[0 0],'g',LineWidth=2); %reynolds
% hold on
% contour(eps,Ln,g6,[0 0],'k',LineWidth=2); %mass 
% hold on
% contour(eps,Ln,g7,[0 0],'k--',LineWidth=2); %thrust
% grid on

%% optimization
clc
% Define the objective function
objective = @(x) Objective_function(x,max(Thrust,[],"all"),max(Mass,[],"all"));

% Define the initial guess
x0 = [40, 0.8, 0.1];

% Define the nonlinear constraint function
nonlcon = @(x) constraints(x);

% Define the optimization options
options = optimoptions(@fmincon, 'Display', 'iter', 'Algorithm', 'sqp','FiniteDifferenceStepSize',0.0001,'TolX', 1e-3, 'TolCon', 1e-3);

% Run the optimization
[x_opt, f_opt, exitflag, output] = fmincon(objective, x0, [], [], [], [], [], [],nonlcon, options);